name: Frontend Deploy

on:
  workflow_dispatch:
  push:
    paths:
      - apps/frontend/**
      - packages/api-client/**
      - packages/common/**
      - packages/prisma/**
      - packages/contracts/**
      - packages/subgraph/**
      - .github/workflows/frontend-deploy.yml
      - .yarn.lock
    branches:
      - main

#
# Avoid the same workflow running more
# than once at the same time
#
concurrency:
  group: frontend-deploy-${{ github.head_ref }}
  cancel-in-progress: true

jobs:
  docker-build:
    runs-on: ubuntu-latest
    outputs:
      digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.REGISTRY_SERVER }}
          username: ${{ secrets.REGISTRY_USER }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Pull browser env variables
        run: |
          mkdir -p /tmp/env
          cd /tmp/env
          echo "DOTENV_PROJECT=${{ secrets.DOTENV_PRJ_FRONTEND }}" > .env.project
          npx --yes dotenv-vault@latest pull ci .env --dotenvMe ${{ secrets.DOTENV_ME_FRONTEND }}

      - name: Build image
        id: build
        uses: docker/build-push-action@v3
        timeout-minutes: 20
        with:
          file: apps/frontend/Dockerfile
          tags: ${{ secrets.REGISTRY_SERVER }}/neftie-frontend:latest
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          secret-files: |
            "browser_env=/tmp/env/.env"
          build-args: |
            SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}
          cache-from: type=gha,scope=${{ github.workflow }}
          cache-to: type=gha,scope=${{ github.workflow }},mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: docker-build
    steps:
      - name: Deploy to Dokku
        uses: appleboy/ssh-action@master
        env:
          image-name: ${{ secrets.REGISTRY_SERVER }}/neftie-frontend@${{ needs.docker-build.outputs.digest }}
        with:
          host: ${{ secrets.DOKKU_SSH_HOST }}
          username: ${{ secrets.DOKKU_SSH_USER }}
          key: ${{ secrets.DOKKU_SSH_PRIVATE_KEY }}
          port: 22
          script: |
            git:from-image frontend ${{ env.image-name }}
